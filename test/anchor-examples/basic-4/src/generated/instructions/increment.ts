/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Increment
 * @category generated
 */
const incrementStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'IncrementInstructionArgs'
)
/**
 * Accounts required by the _increment_ instruction
 * @category Instructions
 * @category Increment
 * @category generated
 */
export type IncrementInstructionAccounts = {
  counter: web3.PublicKey
  authority: web3.PublicKey
}

const incrementInstructionDiscriminator = [11, 18, 104, 9, 104, 174, 59, 33]

/**
 * Creates a _Increment_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 *
 * @category Instructions
 * @category Increment
 * @category generated
 */
export function createIncrementInstruction(
  accounts: IncrementInstructionAccounts
) {
  const { counter, authority } = accounts

  const [data] = incrementStruct.serialize({
    instructionDiscriminator: incrementInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: counter,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: true,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      'CwrqeMj2U8tFr1Rhkgwc84tpAsqbt9pTt2a4taoTADPr'
    ),
    keys,
    data,
  })
  return ix
}
